{"version":3,"sources":["sounds/boom.wav","sounds/clap.wav","sounds/hihat.wav","sounds/kick.wav","sounds/openhat.wav","sounds/ride.wav","sounds/snare.wav","sounds/tink.wav","sounds/tom.wav","DataKey.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DataKey","keyCode","keyTrigger","src","clap","chord","hihat","kick","openhat","boom","ride","snare","tom","tink","Keypad","handleClick","map","key","className","id","data-chord","onClick","type","Boolean","window","location","hostname","match","ReactDOM","render","useState","setChord","playAudio","elem","audio","currentTime","play","classList","add","setTimeout","remove","handleKeypress","e","divID","toString","audioID","toUpperCase","pressedKey","document","getElementById","dataset","useEffect","addEventListener","clickElem","target","innerText","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,oTCmE5BC,EAzDC,CACd,CACEC,QAAS,GACTC,WAAY,IACZC,IAAKC,IACLC,MAAO,QAET,CACEJ,QAAS,GACTC,WAAY,IACZC,IAAKG,IACLD,MAAO,SAET,CACEJ,QAAS,GACTC,WAAY,IACZC,IAAKI,IACLF,MAAO,QAET,CACEJ,QAAS,GACTC,WAAY,IACZC,IAAKK,IACLH,MAAO,WAET,CACEJ,QAAS,GACTC,WAAY,IACZC,IAAKM,IACLJ,MAAO,QAET,CACEJ,QAAS,GACTC,WAAY,IACZC,IAAKO,IACLL,MAAO,QAET,CACEJ,QAAS,GACTC,WAAY,IACZC,IAAKQ,IACLN,MAAO,SAET,CACEJ,QAAS,GACTC,WAAY,IACZC,IAAKS,IACLP,MAAO,OAET,CACEJ,QAAS,GACTC,WAAY,IACZC,IAAKU,IACLR,MAAO,SC1DLS,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OACbf,EAAQgB,KAAI,SAAAC,GACV,OACE,oCACE,4BACEC,UAAU,WACVC,GAAIF,EAAIhB,QACRmB,aAAYH,EAAIZ,MAChBY,IAAKA,EAAIf,WACTmB,QAASN,EACTO,KAAK,UAEJL,EAAIf,WACL,2BAAOgB,UAAU,OAAOf,IAAKc,EAAId,IAAKgB,GAAIF,EAAIf,oBCNpCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFkBD,WAAgB,IAAD,EACFC,mBAAS,IADP,mBACrBzB,EADqB,KACd0B,EADc,KAGtBC,EAAY,SAACC,EAAMC,GACvBA,EAAMC,YAAc,EACpBD,EAAME,OACNH,EAAKI,UAAUC,IAAI,UACnBC,YAAW,WACTN,EAAKI,UAAUG,OAAO,YACrB,MAUCC,EAAiB,SAAAC,GACrB,IAAMC,EAAQD,EAAEzC,QAAQ2C,WAClBC,EAAUH,EAAEzB,IAAI6B,cAChBC,EAAaC,SAASC,eAAeN,GACrCT,EAAQc,SAASC,eAAeJ,GAClCE,GACFhB,EAASgB,EAAWG,QAAQ7C,OAEzB6B,GACLF,EAAUe,EAAYb,IAMxB,OAHAiB,qBAAU,WACRH,SAASI,iBAAiB,UAAWX,MAGrC,yBAAKvB,UAAU,MAAMC,GAAG,gBACtB,yBAAKD,UAAU,aACb,kBAAC,EAAD,CAAQH,YAzBM,SAAA2B,GAClB,IAAMW,EAAYX,EAAEY,OACdpB,EAAQc,SAASC,eAAeP,EAAEY,OAAOC,WAC/CxB,EAASsB,EAAUH,QAAQ7C,OAC3B2B,EAAUqB,EAAWnB,OAuBnB,yBAAKhB,UAAU,UAAUC,GAAG,WACzBd,ME1DO,MAAS2C,SAASC,eAAe,SD6H3C,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1b2b939b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/boom.550be808.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap.a6e86dd7.wav\";","module.exports = __webpack_public_path__ + \"static/media/hihat.4ba39e07.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.4dd58595.wav\";","module.exports = __webpack_public_path__ + \"static/media/openhat.a62db465.wav\";","module.exports = __webpack_public_path__ + \"static/media/ride.b0d70ec5.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.80c4129b.wav\";","module.exports = __webpack_public_path__ + \"static/media/tink.2a6bb6f5.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom.572ed39d.wav\";","import boom from './sounds/boom.wav';\nimport clap from './sounds/clap.wav';\nimport hihat from './sounds/hihat.wav';\nimport kick from './sounds/kick.wav';\nimport openhat from './sounds/openhat.wav';\nimport ride from './sounds/ride.wav';\nimport snare from './sounds/snare.wav';\nimport tink from './sounds/tink.wav';\nimport tom from './sounds/tom.wav';\n\nconst DataKey = [\n  {\n    keyCode: 81,\n    keyTrigger: 'Q',\n    src: clap,\n    chord: 'clap',\n  },\n  {\n    keyCode: 87,\n    keyTrigger: 'W',\n    src: hihat,\n    chord: 'hihat',\n  },\n  {\n    keyCode: 69,\n    keyTrigger: 'E',\n    src: kick,\n    chord: 'kick',\n  },\n  {\n    keyCode: 65,\n    keyTrigger: 'A',\n    src: openhat,\n    chord: 'openhat',\n  },\n  {\n    keyCode: 83,\n    keyTrigger: 'S',\n    src: boom,\n    chord: 'boom',\n  },\n  {\n    keyCode: 68,\n    keyTrigger: 'D',\n    src: ride,\n    chord: 'ride',\n  },\n  {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    src: snare,\n    chord: 'snare',\n  },\n  {\n    keyCode: 88,\n    keyTrigger: 'X',\n    src: tom,\n    chord: 'tom',\n  },\n  {\n    keyCode: 67,\n    keyTrigger: 'C',\n    src: tink,\n    chord: 'tink',\n  },\n];\n\nexport default DataKey;\n","/* eslint-disable jsx-a11y/media-has-caption */\nimport React, { useState, useEffect } from 'react';\nimport DataKey from './DataKey';\nimport './App.css';\n\nconst Keypad = ({ handleClick }) =>\n  DataKey.map(key => {\n    return (\n      <>\n        <button\n          className=\"drum-pad\"\n          id={key.keyCode}\n          data-chord={key.chord}\n          key={key.keyTrigger}\n          onClick={handleClick}\n          type=\"button\"\n        >\n          {key.keyTrigger}\n          <audio className=\"clip\" src={key.src} id={key.keyTrigger} />\n        </button>\n      </>\n    );\n  });\n\nexport default function App() {\n  const [chord, setChord] = useState('');\n\n  const playAudio = (elem, audio) => {\n    audio.currentTime = 0;\n    audio.play();\n    elem.classList.add('played');\n    setTimeout(() => {\n      elem.classList.remove('played');\n    }, 100);\n  };\n\n  const handleClick = e => {\n    const clickElem = e.target;\n    const audio = document.getElementById(e.target.innerText);\n    setChord(clickElem.dataset.chord);\n    playAudio(clickElem, audio);\n  };\n\n  const handleKeypress = e => {\n    const divID = e.keyCode.toString();\n    const audioID = e.key.toUpperCase();\n    const pressedKey = document.getElementById(divID);\n    const audio = document.getElementById(audioID);\n    if (pressedKey) {\n      setChord(pressedKey.dataset.chord);\n    }\n    if (!audio) return;\n    playAudio(pressedKey, audio);\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeypress);\n  });\n  return (\n    <div className=\"app\" id=\"drum-machine\">\n      <div className=\"container\">\n        <Keypad handleClick={handleClick} />\n      </div>\n      <div className=\"display\" id=\"display\">\n        {chord}\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}